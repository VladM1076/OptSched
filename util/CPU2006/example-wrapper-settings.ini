#*******************************************************************************
#Description:  Example file for using the runspec-wrapper.py script to run
#              multiple tests at once. This example will run 4 tests in total
#              automatically.
#Author:       Vang Thao
#Created:      August 18, 2019
#Last Update:  August 18, 2019
#*******************************************************************************/

[SCRIPT_SETTINGS]
script_version = 1.3

# Used for execution-time tests. Will copy the .txt file containing
# the score results into the output directory if enabled (y/n).
copy_scores_txt = y

# Used for execution-time tests. Will process and create a spreadsheet
# containing the median of the score results and the random variance (y/n).
output_spreadsheet = y

[GLOBAL]
# Path to the sched.ini file for OptSched. Will be used to edit and update settings.
sched_ini_path = /home/vang/research/OptSched/example/optsched-cfg/sched.ini

# Path to the CPU2006 directory
cpu2006_path = /home/vang/research/CPU2006/

# Path to the flang installation directory. 
flang_install_dircetory = /home/vang/research/flang/flang-install/

# Root output directory for compile-time and execution-time results.
# Compile-time tests will be stored in the root-dir/time-stamp/compile-time/TEST1... directiory
# Execution-time tests will be stored in the root-dir/time-stamp/execution-time/TEST1.... directory
scores_output_directory = /mnt/i/Research Summer 2019/score_results/

# Compile-time script that will be used in compile-time tests.
runspec-wrapper-optsched_path = /mnt/i/Research Summer 2019/runspec-wrapper-optsched.py

# This will run a compile-time test for bwaves using the original 1-pass scheduling
# approach on all functions, a timeout of 10ms, heuristic LLVM_LUC_NID, enum_heuristic LUC_NID,
# spill cost function SLIL, spill cost weight 10, and latency precision LLVM.
[TEST1]
# Option to set the mode that the test will be run in. Either execution or
# compile time (e/c).
mode = c

# Option to store a copy of the sched.ini file containing the settings used
# in the output directory (y/n).
copy_sched_ini = y

# Option to name the folder that will be created specifically for this test. 
# Will default to TEST1, TEST2, etc... if none specified.
test_name = 1pass-bwaves-10ms-slil

# These are sched.ini settings for OptSched. Look in the sched.ini file for a description
# of each settings and the available options. You can add any sched.ini settings
# onto this list and they will be updated and changed as well.
use_opt_sched = YES
print_spill_counts = YES
region_timeout = 10
length_timeout = 10
heuristic = LLVM_LUC_NID
second_pass_enum_heuristic = CP
enum_heuristic = LUC_NID
spill_cost_function = SLIL
spill_cost_weight = 10
latency_precision = LLVM
use_two_pass = NO
first_pass_region_timeout = 5
first_pass_length_timeout = 5
second_pass_region_timeout = 5
second_pass_length_timeout = 5

# SPEC CPU2006 options for runspec
# Config file to use for this test.
config_file = Intel_llvm_6.cfg
# Benchmark to run.
# NOTE: For compile-time tests, the options for the compile-time script
# must be used instead of the options for runspec. Look in the compile-time script
# for all of the available options.
# Example: To do a compile-time test for all floating point benchmarks, you must specify
# "FP" while for execution-time tests, it is "fp".
benchmark_selection = bwaves
# Number of time to run each benchmarks in execution-time tests. Not
# used in compile-time tests.
iteration_num = 1

# After TEST1 is done, TEST2 will run automatically.
# This test will run a compile-time test for bwaves using the 2-pass scheduling approach
# on all functions, a timeout of 5ms for the first pass, 5ms for the second pass,
# heuristic LLVM_LUC_NID, enum_heuristic LUC_NID, second pass enum_heuristic CP, 
# spill cost function PRP, spill cost weight 10000, and latency precision LLVM.
[TEST2]
testname = 2pass-bwaves-5ms5ms-prp
use_two_pass = YES
spill_cost_function = PRP
spill_cost_weight = 10000

# Run an execution-time test with the same settings used in TEST2 using all floating
# point benchmarks.
[TEST3]
testname = 2pass-fp-5ms5ms-prp-execution-time
mode = e
benchmark_selection = fp

# Run a compile-time test with the same settings used in TEST2 using all floating
# point benchmarks. The default name of "TEST4" will be used since none was specified for
# the test output directory.
[TEST4]
mode = c
benchmark_selection = FP
